// proto/job/v1/job_service.proto
syntax = "proto3";

package job.v1;
option go_package = "github.com/cybergarage/go-job/api/job/v1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

//////////////////////////////
// Version
//////////////////////////////

message VersionRequest {  
}

message VersionResponse {
  string version = 1;
  string revision = 2;
  string build_date = 3;
  string api_version = 4;
}

//////////////////////////////
// Job state enumeration
//////////////////////////////

enum JobState {
  JOB_STATE_UNSET = 0;
  JOB_STATE_CREATED = 1;
  JOB_STATE_SCHEDULED = 2;
  JOB_STATE_PROCESSING = 4;
  JOB_STATE_CANCELLED = 8;
  JOB_STATE_TIMED_OUT = 16;
  JOB_STATE_COMPLETED = 32;
  JOB_STATE_TERMINATED = 64;
}

//////////////////////////////
// Job representation
//////////////////////////////

message Job {
  //////////////////////////////
  // Basic information: 1-10
  //////////////////////////////

  // Kind of the job (e.g., "email", "data_processing")
  string kind = 1;  
  // Description of the job
  string description = 2;
  // Registered at timestamp
  google.protobuf.Timestamp registered_at = 3;

  //////////////////////////////
  // Execution information: 11-20
  //////////////////////////////

  // Schedule using cron expression
  optional string cron_spec = 11;
  // Schedule at a specific time
  optional google.protobuf.Timestamp schedule_at = 12;
}

//////////////////////////////
// Job instance representation
//////////////////////////////

message JobInstance {
  //////////////////////////////
  // Basic information: 1-10
  //////////////////////////////

  // Unique instance identifier
  string uuid = 1;
  // Kind
  string kind = 2;

  //////////////////////////////
  // Execution information: 11-20
  //////////////////////////////

  // Current state
  JobState state =11;  
  // Job arguments
  repeated google.protobuf.Any arguments = 12;
  // Execution results (if completed)
  repeated google.protobuf.Any results = 13;  
  // Error information (if failed)
  optional string error = 14;

  //////////////////////////////
  // Timestamps: 21-30
  //////////////////////////////

  optional google.protobuf.Timestamp created_at = 21;
  optional google.protobuf.Timestamp scheduled_at = 22;
  optional google.protobuf.Timestamp processed_at = 23;
  optional google.protobuf.Timestamp completed_at = 24;
  optional google.protobuf.Timestamp terminated_at = 25;
  optional google.protobuf.Timestamp cancelled_at = 26;
  optional google.protobuf.Timestamp timed_out_at = 27;

  //////////////////////////////
  // Runtime information: 31-40
  //////////////////////////////

  int32 attempt_count = 31;
}

//////////////////////////////
// ScheduleJobRequest/Response
//////////////////////////////

message ScheduleJobRequest {
  //////////////////////////////
  // Basic information: 1-10
  //////////////////////////////
  
  // Kind to schedule (must be pre-registered)
  string kind = 1;  

  //////////////////////////////
  // Execution options: 11-20
  //////////////////////////////
  
  // Priority (lower values = higher priority)
  optional int32 priority = 11;
  // Arguments to pass to the job executor
  repeated google.protobuf.Any arguments = 12;
}

message ScheduleJobResponse {
  // Scheduled job instance
  JobInstance instance = 1;
}

//////////////////////////////
// ListRegisteredJobsRequest/Response
//////////////////////////////

message ListRegisteredJobsRequest {
}

message ListRegisteredJobsResponse {
  // List of registered jobs
  repeated Job jobs = 1;
}

//////////////////////////////
// LookupInstancesRequest/Response
//////////////////////////////

message Query {
  // Filter by job kind
  optional string kind = 1;
  // Filter by job state
  optional JobState state = 2;
}

message LookupInstancesRequest {
  // Lookup query
  Query query = 1;
}

message LookupInstancesResponse {
  // List of job instances
  repeated JobInstance instances = 1;
}

//////////////////////////////
// JobService representation
//////////////////////////////

service JobService {
  rpc GetVersion(VersionRequest) returns (VersionResponse); 
  rpc ScheduleJob(ScheduleJobRequest) returns (ScheduleJobResponse);
  rpc ListRegisteredJobs(ListRegisteredJobsRequest) returns (ListRegisteredJobsResponse);
  rpc LookupInstances(LookupInstancesRequest) returns (LookupInstancesResponse);
}